blobs:
  # Bucket to store blobs, e.g. testcases, fuzzer archives, etc.
  bucket: test-blobs-bucket

deployment:
  # Bucket to store deployment artifacts, e.g. source archives, etc.
  bucket: test-deployment-bucket

bigquery:
  # Bucket to store bigquery artifacts, e.g. crash stats, etc.
  bucket: test-bigquery-bucket

backup:
  # Bucket to store backup artifacts, e.g. datastore data (backup cron), etc.
  bucket: test-backup-bucket

coverage:
  reports:
    # Bucket to load code coverage information from.
    bucket: test-coverage-bucket

logs:
  fuzzer:
    # Bucket to store logs for fuzzer runs.
    bucket: test-fuzzer-logs-bucket

monitoring:
  # Flag to indicate if Stackdriver monitoring is enabled or not (disabled by default).
  enabled: false

stacktrace:
  # Stack frames to ignore when determining the crash signature.
  stack_frame_ignore_regexes:

  # Stacks to ignore from being considered as a crash altogether.
  stack_blacklist_regexes:

# Suffix to append to automatically created buckets.
# bucket_domain_suffix: bucket.suffix

env:
  # Application ID for the Google Cloud Project. In production, this will have a s~ prefix.
  APPLICATION_ID: test-bot

  # Default project name unless overridden in a job definition.
  PROJECT_NAME: test-project

  # Default bucket to store corpus / useful testcases found during fuzzing. This has sub-directories
  # for each fuzzer, but not for jobs. So, unless you override this in a job definition, a fuzzer
  # across different jobs share the same corpus (e.g. useful for different fuzzing engines to
  # cross-pollinate the corpus).
  CORPUS_BUCKET: test-corpus-bucket

  # Default bucket to store minimized corpus for various fuzzers. Once a day, corpus pruning task
  # minimizes the current corpus in CORPUS_BUCKET and then archives it in this bucket. You can
  # customize it to be different from the backup bucket above if you want separation from other
  # backup items like datastore backups, etc.
  BACKUP_BUCKET: test-backup-bucket

  # Default bucket to store quarantined corpus items. These items prevent fuzzer from making
  # progress during fuzzing (e.g. crashes, timeout, etc), so we automatically quarantine them once
  # they sneak into the corpus somehow. Once the bugs are fixed, items from quarantine are brought
  # back into the main corpus bucket.
  QUARANTINE_BUCKET: test-quarantine-bucket

  # Default bucket to store shared corpus across all job types. This is planned for future cross
  # pollination with other data sources on the web.
  SHARED_CORPUS_BUCKET: test-shared-corpus-bucket

  # Default bucket to store fuzzing logs from testcase runs. This is different from the fuzzer logs
  # above which logs the fuzzer run that generates the testcases, whereas this one logs the run of
  # the testcases against the target application.
  FUZZ_LOGS_BUCKET: test-fuzz-logs-bucket

  # Default bucket to store mutator plugins.
  MUTATOR_PLUGINS_BUCKET: test-mutator-plugins-bucket

  # Bucket to store blobs, e.g. testcases, fuzzer archives, etc.
  BLOBS_BUCKET: test-blobs-bucket

  # Bucket to store bigquery artifacts, e.g. crash stats, etc.
  BIGQUERY_BUCKET: test-bigquery-bucket

  # Bucket to store deployment artifacts, e.g. source archives, etc.
  DEPLOYMENT_BUCKET: test-deployment-bucket

  # Default bucket to store bot execution logs
  BOT_LOGS_BUCKET: test-bots-logs-bucket

  # Bucket to load code coverage information from.
  COVERAGE_BUCKET: test-coverage-bucket

  #Django Backend SECRET_KEY
  SECRET_KEY: "XXXXXX"
  
  # Minio Backend Server Host
  MINIO_HOST: '127.0.0.1:9000'

  # Minio access key
  MINIO_ACCESS_KEY: 'bUUZXR8RJfYPOmtg'
  #Minio secret key
  MINIO_SECRET_KEY: '9gGWrrP1kPm6JL6s6YHgP6CSYKNONLZH'

  # Minio Root user and password
  MINIO_ROOT_USER: 'minioadmin'
  MINIO_ROOT_PASSWORD: 'minioadmin'

  # Mino storage path
  MINIO_STORAGE_PATH: '~/mounting_point/src/minio'

  # DB
  MONGO_HOST: 'mongodb://localhost:27017/'
  MONGO_DB_PATH: '~/mounting_point/src/database'

  # Redis Queue
  QUEUE_HOST: 'localhost'
  CELERY_BROKER_URL: 'amqp://localhost'

  # Web API Configuration
  API_HOST: 'http://localhost:8086'
  API_KEY:  'a13f9b7a2d9d1f029d22b17e882d824a5788a5fa'

  # Django Configuration
  BACKEND_SUPERUSER: 'admin'

