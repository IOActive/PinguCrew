import os
import sys
import tempfile
import base64
import pickle
import subprocess
import shlex
import pika
from src.verifier.templates.PythonTemplateVerifier import PythonTemplateVerifier

# allows for un-pickling of exploitable's Classification objects
file_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(file_path, "exploitable/exploitable"))


class GdbTarget(object):

    def __init__(self, name, host, port, arch, endian):
        self.name = name
        self.host = host
        self.port = port
        self.arch = arch
        self.endian = endian


class GdbCommandFileGenerator(object):

    def __init__(self, target, local_tmpfile):
        self._target = target
        self._local_tmpfile = local_tmpfile

    def generate(self):
        cmd_file = "set endian %s\n" % self._target.endian
        cmd_file += "set arch %s\n" % self._target.arch
        cmd_file += "target remote %s:%s\n" % (self._target.host, self._target.port)
        cmd_file += "continue\n"
        cmd_file += "exploitable -p %s\n" % self._local_tmpfile
        print(cmd_file)
        return cmd_file


class RemoteExploitableVerifier(PythonTemplateVerifier):
    '''
    This is a remote exploitable verifier for Lucky CAT.
    It is based on the triage.py script of exploitable
    (https://github.com/jfoote/exploitable).
    '''
    tmp_file = "/tmp/triage.pkl"

    def __init__(self):
        path_to_this_file = os.path.split(os.path.realpath(__file__))[0]
        super(RemoteExploitableVerifier, self).__init__(
            config_path=os.path.join(path_to_this_file, 'verifier.cfg'))

    def _cleanup_tmp_file(self):
        '''
        Deletes the temp file that is generated by the exploitable
        extension and consumed by this script.
        '''
        if os.path.exists(self.tmp_file):
            os.remove(self.tmp_file)

    def _create_queue_host_channel(self):
        conn = pika.BlockingConnection(pika.ConnectionParameters(
            self.config['DEFAULT']['queue_host']))
        channel = conn.channel()
        return channel, conn

    def _send_to_remote_client(self, data):
        channel, conn = self._create_queue_host_channel()
        channel.basic_publish(exchange='src',
                              routing_key=self.config['DEFAULT']['remote_queue'],
                              body=data)
        channel.basic_ack()
        conn.close()
        print('Sent crash data: %s' % data)

    def _call_exploitable(self, inferior_cmd, crash):
        self._send_to_remote_client(crash)

        target = GdbTarget("Some_Router", "127.0.0.1", "1234", "i386", "little")
        cmd_file_data = GdbCommandFileGenerator(target, self.tmp_file).generate()
        cmd_file = tempfile.NamedTemporaryFile(delete=False)
        cmd_file.write(cmd_file_data.encode())
        cmd_file.close()

        self._cleanup_tmp_file()
        call = self.config['REMOTEEXPLOITABLEVERIFIER']['gdb_cmd'] + cmd_file.name

        subprocess.call(call, shell=True)
        try:
            classification = pickle.load(open(self.tmp_file, "rb"))
        except Exception as e:
            classification = None
            print('[RemoteExploitableVerifier] verification failed (%s), call=%s' % (e, call))

        self._cleanup_tmp_file()
        os.unlink(cmd_file.name)

        return classification

    def _verify_one_crash(self, crash_info):
        print('[LocalExploitableVerifier] Got job with ID %s' %
              crash_info['crash_id'])
        result = self._call_exploitable(crash_info['program'], crash_info['data'])

        if result:
            return {'crash_hash': "{}.{}".format(result.hash.major,
                                                 result.hash.minor),
                    'classification': result.category,
                    'short_desc': str(result.tags[0]),
                    'crash_id': crash_info['crash_id'],
                    'verified': True}
        else:
            return {'crash_id': crash_info['crash_id'],
                    'verified': False}


def main():
    remote_exploitable = RemoteExploitableVerifier()
    remote_exploitable.run()


if __name__ == '__main__':
    main()
