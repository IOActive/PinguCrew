# Copyright 2024 IOActive
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import tempfile
import base64
import pickle
import subprocess
import shlex
from src.verifier.templates.PythonTemplateVerifier import PythonTemplateVerifier

# TODO do we really need this?
# TODO broken
# allows for un-pickling of exploitable's Classification objects
import sys
file_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(file_path, "exploitable/exploitable"))


class LocalExploitableVerifier(PythonTemplateVerifier):
    '''
    This is a local exploitable verifier for Lucky CAT.
    It is based on the triage.py script of exploitable
    (https://github.com/jfoote/exploitable).
    '''
    tmp_file = "/tmp/triage.pkl"

    def __init__(self):
        path_to_this_file = os.path.split(os.path.realpath(__file__))[0]
        super(LocalExploitableVerifier, self).__init__(
            config_path=os.path.join(path_to_this_file, 'verifier.cfg'))

    def _cleanup_tmp_file(self):
        '''
        Deletes the temp file that is generated by the exploitable
        extension and consumed by this script.
        '''
        if os.path.exists(self.tmp_file):
            os.remove(self.tmp_file)

    def _call_exploitable(self, inferior_cmd, crash):
        self._cleanup_tmp_file()
        call = self.config['LOCALEXPLOITABLEVERIFIER']['gdb_cmd'].replace("%s", self.tmp_file) + " " + inferior_cmd + " " + crash
        subprocess.call(shlex.split(call), stdout=open(os.devnull, 'w'))
        try:
            classification = pickle.load(open(self.tmp_file, "rb"))
        except Exception as e:
            classification = None
            print('[LocalExploitableVerifier] verification failed (%s), call=%s' % (e, call))
        self._cleanup_tmp_file()
        return classification

    def _write_crash_to_tmpfile(self, crash_info):
        fd, tempfilename = tempfile.mkstemp()
        f = os.fdopen(fd, 'wb')
        f.write(base64.b64decode(crash_info['data']))
        f.close()

    def _verify_one_crash(self, crash_info):
        print('[LocalExploitableVerifier] Got job with ID %s' %
              crash_info['crash_id'])
        try:
            temp_file = self._write_crash_to_tmpfile(crash_info)
            result = self.triage(crash_info['program'], temp_file)
            if os.path.exists(temp_file):
                os.remove(temp_file)
        except Exception as e:
            print('[LocalExploitableVerifier] Could not verify crash: %s' %
                  str(e))

        if result:
            return {'crash_hash': "{}.{}".format(result.hash.major,
                                                 result.hash.minor),
                    'classification': result.category,
                    'short_desc': str(result.tags[0]),
                    'crash_id': crash_info['crash_id'],
                    'verified': True}
        else:
            return {'crash_id': crash_info['crash_id'],
                    'verified': False}


def main():
    local_exploitable = LocalExploitableVerifier()
    local_exploitable.start()
    local_exploitable.join()


if __name__ == '__main__':
    main()
