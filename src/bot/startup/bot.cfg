[DEFAULT]
api_host = localhost:5000
api_key = yuL4uJ4loqCGl86NDwDloPaPa5PQZs0f9hXRrLjbnJNLau3vxWKs3qS0XKN7BV3o
queue_host = localhost
bot_name = luckycat
crash_queue = crashes
stats_queue = stats
root_dir = /home/roboboy/Projects/LuckyCAT/
log_dir = logs
tasks_queue = tasks
fuzzer = Libfuzzer
platform = Linux
TRUSTED_HOST = true
stack_blacklist_regexes =
# Maximum size allowed for an appengine entity type.
# Explicitly kept slightly lower than 1 MB.
ENTITY_SIZE_LIMIT = 900000
run_timeout = 1000000
GAE_ENV="Dev"

# Minimum number of unreproducible crashes to see before filing it.
FILE_UNREPRODUCIBLE_TESTCASE_MIN_CRASH_THRESHOLD = 100

# Heartbeat wait interval.
HEARTBEAT_WAIT_INTERVAL = 600
# We store at most 3 stacktraces per Testcase entity (original, second, latest).
STACKTRACE_LENGTH_LIMIT = ENTITY_SIZE_LIMIT // 3

# Maximum size allowed for testcase comments.
# 1MiB (maximum Datastore entity size) - ENTITY_SIZE_LIMIT (our limited entity
# size with breathing room), divided by 2 to leave room for other things in the
# entity. This is around 74KB.
TESTCASE_COMMENTS_LENGTH_LIMIT = (1024 * 1024 - ENTITY_SIZE_LIMIT) // 2
LOG_TO_CONSOLE = True
# Seconds to wait in the event of a failed operation.
FAIL_WAIT=1000

#Bultin Fuzzers Directory
FUZZERS_DIR=../fuzzers/

# Maxium number of testcases to run in one cycle.
MAX_TESTCASES=3

#Bucktes Minio variables
MINIO_HOST=127.0.0.1:9000
ACCESS_KEY=mK6kUOlDZ834q0wL
SECRET_KEY=Hq1cuslNaaAFcLXU6q45fqhrFGFG3UCO

#Build
FUZZ_TARGET_BUILD_BUCKET_PATH=
DATAFLOW_BUILD_BUCKET_PATH=
SYSTEM_BINARY_DIR=False
# URL pointing to the location of release builds on Google Cloud Storage. Unused for custom builds.
RELEASE_BUILD_BUCKET_PATH=http://127.0.0.1:9001/test/test-([0-9]+).zip
# Symbolized release build
SYM_RELEASE_BUILD_BUCKET_PATH=
# Symbolized release debug build
SYM_DEBUG_BUILD_BUCKET_PATH=
# provides a way to specify custom runtime flags for AddressSanitizer
ADDITIONAL_ASAN_OPTIONS=

#Blobs
TEST_BLOBS_BUCKET=/test/
BLOBS_BUCKET=

# Build script
BUILD_SCRIPT=

## Global
LOCAL_DEVELOPMENT= False
PY_UNITTESTS= False

## Fuzz
FUZZER_NAME=Libfuzzer
# Number of times to retry in the event of a failed operation.
FAIL_RETRIES=1

## LibFuzzer and AFL specific
CORPUS_PRUNE=True


## Blackbox fuzzing specific
# Application binary name (including extension).
APP_NAME: ''
# Arguments to be passed to the target application. This variable Should include both optional and required arguments you want to pass.
APP_ARGS=''
# List of command line arguments that must not be minimized in minimization task, i.e. are always
# necessary to reproduce most crashes.
REQUIRED_APP_ARGS=
# Indicates whether a job uses a manually uploaded build or not.
CUSTOM_BINARY= False
# Indicates how many seconds a target application can spend on processing an individual testcase.
TEST_TIMEOUT=100000

# Flag to indicate if we should append %TESTCASE% at end of application arguments (if it does not
# exist already).
APP_ARGS_APPEND_TESTCASE= True

# Command to launch app (Android, e.g. shell am start ...).
APP_LAUNCH_COMMAND= ''

# Application binary full paths (release and debug builds).
APP_PATH= ''
APP_PATH_DEBUG= ''

# Flag to indicate if the crashing ASSERTs are security issues.
ASSERTS_HAVE_SECURITY_IMPLICATION= False

# Flag to indicate if we want to do bad build check on the application build. This launches an
# application without a testcase and verifies that it does not crash on startup.
BAD_BUILD_CHECK= True

# Store build artifacts in cache to save network bandwidth.
CACHE_STORE= True

# Flag to indicate if the CHECKs are security issues.
CHECKS_HAVE_SECURITY_IMPLICATION= False

# Number of times to retry a testcase when checking for a crash.
CRASH_RETRIES= 10

# Flag to indicate if CheckJNI flag is enabled (Android).
ENABLE_CHECK_JNI= False

# Flag to indicate if debug checks are enabled (Android).
ENABLE_DEBUG_CHECKS= False

# Faster version of warmup timeout, used for bad build checks.
FAST_WARMUP_TIMEOUT= 40

# Flag to indicate if we should create testcases for security bugs only and ignore functional ones.
FILTER_FUNCTIONAL_BUGS= False

# Absolute paths to fuzzer directory. Useful to use in fuzzer launcher script.
FUZZER_DIR= ''

# Maximum time the testcase are run in one fuzz cycle (0 - use default task lease timeout).
FUZZ_TEST_TIMEOUT= 0

# Fuzzer execution timeout.
FUZZER_TIMEOUT= 5400

# Increase GCE metadata server timeout to mitigate transient errors.
GCE_METADATA_TIMEOUT= 60

# Enable leak detection for ASan builds.
LSAN= False

# Maximum number of simultaneous fuzzing / testcase execution threads.
MAX_FUZZ_THREADS= 4

# Flag to indicate if resources used by a testcase should be minimized.
MINIMIZE_RESOURCES= True

# Package name for application (Android).
PKG_NAME= ''

# Time interval between process polls to check for crashes.
PROCESS_POLL_INTERVAL= 0.5

# Flag to indicate if we should force app install every time before a new task is started (Android).
REINSTALL_APP_BEFORE_EACH_TASK= false

# Flag to determine if system temp directory (e.g. /tmp on posix platforms)
# should be cleared after every task run. This can be set to avoid interfering
# with other processes on system using the system temp directory.
SKIP_SYSTEM_TEMP_CLEANUP= False

# Flag to skip auto-closing of bug when verified.
SKIP_AUTO_CLOSE_ISSUE= False

# Minimum number of test cases before attempting stale processes cleanup.
TESTCASES_BEFORE_STALE_PROCESS_CLEANUP= 1

# Delay between executing multiple instances of an application.
THREAD_DELAY= 0.0

# Testcase timeout multiplier. For some iterations, we pick a variant multiplier to apply on
# |TEST_TIMEOUT| to do shorter and longer runs.
TIMEOUT_MULTIPLIER= 1.0

# Flag to indicate if everything should be unpacked from build or a subset of fuzz targets. This
# is only applicable for libFuzzer, AFL builds where we can selectively pick a random fuzz target
# and only unpack that.
UNPACK_ALL_FUZZ_TARGETS_AND_FILES= True

# Timeout in seconds for blocking url operations such as connection establishment.
URL_BLOCKING_OPERATIONS_TIMEOUT= 600

# Flag to indicate if user profile should be stored in memory.
USER_PROFILE_IN_MEMORY= True

# Version matching pattern to determine parsing of versions for Extended stable, Stable and Beta builds.
VERSION_PATTERN= ''

# Launch warm up time for a new build, build up its artifacts e.g. user profile directory, etc.
# On a fast multicore machine, this can be set to less than 10 seconds.
WARMUP_TIMEOUT= 120

# Watch for process exit periodically and bail out when it happens rather than timeout (Android).
WATCH_FOR_PROCESS_EXIT= False

PROJECT_NAME=LuckyCATProject