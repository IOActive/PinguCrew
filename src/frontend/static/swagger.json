{
  "openapi": "3.0.0",
  "info": {
    "description": "sean",
    "version": "1.0.0",
    "title": "Seans-Python3-Flask-Rest-Boilerplate",
    "contact": {
      "email": "seanwasere@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Bot Requests",
      "description": "Bot API for requesting and return Bot requests"
    },
    {
      "name": "Job Requests",
      "description": "Job API for requesting and return Job requests"
    },
    {
      "name": "Task Requests",
      "description": "Task API for requesting and return Task requests"
    },
    {
      "name": "TestCase Requests",
      "description": "TestCase API for requesting and return TestCase requests"
    },
    {
      "name": "Fuzz Target Requests",
      "description": "TestCase API for requesting and return TestCase requests"
    },
    {
      "name": "Fuzz Target Job Requests",
      "description": "TestCase API for requesting and return TestCase requests"
    }
  ],
  "paths": {
    "/api/bot/heartbeat": {
      "post": {
        "tags": [
          "Bot Requests"
        ],
        "summary": "Push a bot heartbeat",
        "requestBody": {
          "description": "ush a bot heartbeat",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/heartbeat"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Failed. Bad post data."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/bot/{botName}": {
      "parameters": [
        {
          "name": "botName",
          "in": "path",
          "required": true,
          "description": "Name of the bot that we want to match"
        }
      ],
      "get": {
        "tags": [
          "Bot Requests"
        ],
        "summary": "Get Bot request with given name",
        "parameters": [
          {
            "in": "path",
            "name": "botName",
            "required": true,
            "description": "Bot Request name",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bot name not provided."
          },
          "404": {
            "description": "Failed. Bot has not been registered yet."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }

      },
    "/api/bot/register":{
      "put": {
        "tags": [
          "Bot Requests"
        ],
        "summary": "Register Bot",
        "requestBody": {
          "description": "Register Bot",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bot"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "409": {
            "description": "Failed. Bot already Registered."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/job/{job_id}": {
      "parameters": [
        {
          "name": "job_id",
          "in": "path",
          "required": true,
          "description": "ID of the job that we want to match"
        }
      ],
      "get": {
        "tags": [
          "Job Requests"
        ],
        "summary": "Get Job request with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "description": "Job Request ID",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Job ID not provided."
          },
          "404": {
            "description": "Failed. Job has not been registered yet."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Job Requests"
        ],
        "summary": "Delete Job request with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "description": "Job Request ID",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Job ID not provided."
          },
          "404": {
            "description": "Failed. Job has not been registered yet."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
      },
    "/api/jobs": {
          "get": {
            "tags": [
              "Job Requests"
            ],
            "summary": "Get all Job request",
            "responses": {
              "200": {
                "description": "OK"
              },
              "400": {
                "description": "Failed. Job ID not provided."
              },
              "404": {
                "description": "Failed. Job has not been registered yet."
              }
            },
            "security": [
              {
                "bearerAuth": []
              }
            ]
          }
        },
    "/api/job": {
      "put": {
        "tags": [
          "Job Requests"
        ],
        "summary": "Add Job",
        "requestBody": {
          "description": "Register BotAdd Job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/job"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Job post data."
          },
          "409": {
            "description": "Failed. Job already Registered."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/task":{
      "put": {
        "tags": [
          "Task Requests"
        ],
        "summary": "Add Task",
        "requestBody": {
          "description": "Add Task",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/task"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Job ID not specified, missing command or argument parameters, ."
          },
          "406": {
            "description": "Failed. Tasks platform does not math the Job platform."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Task Requests"
        ],
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": true,
            "description": "Platform"
          }
        ],
        "summary": "Get Task by platform",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Platform not specified."
          },
          "204": {
            "description": "Failed. empty queue."
          },
          "404": {
            "description": "Failed. Queue not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }

    },

    "/api/{job_id}/testcases": {
      "parameters": [
        {
          "name": "job_id",
          "in": "path",
          "required": true,
          "description": "ID of the job that we want to match"
        }
      ],
      "get": {
        "tags": [
          "TestCase Requests"
        ],
        "summary": "Get all TestCases request with given Job ID",
        "parameters": [
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "description": "Job Request ID",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Job ID not provided."
          },
          "404": {
            "description": "Failed. This job has not testcases."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/testcase/{testcase_id}": {
      "parameters": [
        {
          "name": "testcase_id",
          "in": "path",
          "required": true,
          "description": "ID of the job that we want to match"
        }
      ],
      "get": {
        "tags": [
          "TestCase Requests"
        ],
        "summary": "Get TestCase request with given a Testcase ID",
        "parameters": [
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "description": "Job Request ID",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          },
          {
            "in": "path",
            "name": "testcase_id",
            "required": true,
            "description": "Testcase Request ID",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Job ID not provided."
          },
          "404": {
            "description": "Failed. This job has not testcases or does not exists."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post":{
          "tags": [
            "TestCase Requests"
          ],
          "summary": "Update TestCases request with given Job ID and Testcase ID",
          "parameters": [
            {
              "in": "path",
              "name": "testcase_id",
              "required": true,
              "description": "Testcase Request ID",
              "schema": {
                "$ref": "#/components/schemas/ID"
              }
            }
          ],
          "requestBody": {
            "description": "Update Testcase",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/testcase"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "Failed. Job ID not provided."
            },
            "404": {
              "description": "Failed. This job has not testcases or does not exists."
            }
          },
          "security": [
            {
              "bearerAuth": []
            }
        ]
      }
    },
    "/api/testcase": {
      "parameters": [
        {
          "name": "job_id",
          "in": "path",
          "required": true,
          "description": "ID of the job that we want to match"
        }
      ],
      "put": {
        "tags": [
          "TestCase Requests"
        ],
        "summary": "Add TestCases request with given Job ID",
        "parameters": [
        ],
        "requestBody": {
            "description": "Add Testcase",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/testcase"
                }
              }
            }
          },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Job ID not provided."
          },
          "404": {
            "description": "Failed. This job has not testcases."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/fuzztargets":{
      "get": {
        "tags": [
          "Fuzz Target Requests"
        ],
        "summary": "Get All Fuzz Targets",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Fuzz Targets not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }

    },
    "/api/fuzztarget":{
      "get": {
        "tags": [
          "Fuzz Target Requests"
        ],
        "summary": "Get Fuzz Targets",
        "parameters": [
          {
            "name": "fuzzer_engine",
            "in": "query",
            "required": false,
            "description": "fuzzer engine"
          },
                    {
            "name": "binary",
            "in": "query",
            "required": false,
            "description": "binary name"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Fuzz Targets not found"
          },
          "400": {
            "description": "Failed. No (Fuzz Target Engine and Binary Name) or id were provided"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Fuzz Target Requests"
        ],
        "summary": "Add Fuzz target",
        "requestBody": {
          "description": "Add Fuzz Target",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fuzztarget"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. missing command or argument parameters, ."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/fuzztarget/{fuzztarget_id}": {
      "parameters": [
        {
          "name": "fuzztarget_id",
          "in": "path",
          "required": true,
          "description": "ID of the fuzz target that we want to delete"
        }
      ],
      "delete": {
        "tags": [
          "Fuzz Target Requests"
        ],
        "summary": "Delete Fuzz target",
        "parameters": [
          {
            "in": "path",
            "name": "fuzztarget_id",
            "required": true,
            "description": "ID of the fuzz target that we want to delete",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. missing command or argument parameters, ."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/fuzzTargetJobs":{
      "get": {
        "tags": [
          "Fuzz Target Job Requests"
        ],
        "summary": "Get All Fuzz Target Jobs",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Fuzz Target Jobs not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }

    },
    "/api/fuzzTargetJob":{
      "get": {
        "tags": [
          "Fuzz Target Job Requests"
        ],
        "summary": "Get Fuzz Target Job",
        "parameters": [
          {
            "name": "engine",
            "in": "query",
            "required": false,
            "description": "fuzzer engine"
          },
                    {
            "name": "job_id",
            "in": "query",
            "required": false,
            "description": "job id"
          },
          {
            "name": "fuzzing_target",
            "in": "query",
            "required": false,
            "description": "fuzzing target"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Fuzz Targets not found"
          },
          "400": {
            "description": "Failed. job id or engine not provided"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Fuzz Target Job Requests"
        ],
        "summary": "Add Fuzz target job",
        "requestBody": {
          "description": "Add Fuzz Target Job",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/fuzztargetjob"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. missing command or argument parameters, ."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/fuzztarget/{fuzzTargetjobId}": {
      "parameters": [
        {
          "name": "fuzzTargetjobId",
          "in": "path",
          "required": true,
          "description": "ID of the fuzz target that we want to delete"
        }
      ],
      "delete": {
        "tags": [
          "Fuzz Target Job Requests"
        ],
        "summary": "Delete Fuzz target",
        "parameters": [
          {
            "in": "path",
            "name": "fuzzTargetjobId",
            "required": true,
            "description": "ID of the fuzz target job that we want to delete",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. missing command or argument parameters, ."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/fuzzers":{
      "get": {
        "tags": [
          "Fuzzer Requests"
        ],
        "summary": "Get All Fuzzers",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Fuzzer not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }

    },
    "/api/fuzzer": {
      "get": {
        "tags": [
          "Fuzzer Requests"
        ],
        "summary": "Get Fuzzer by Name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "fuzzer name"
          },
                    {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "fuzzer id"
          }],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. No fuzzer name or id specified."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Fuzzer Requests"
        ],
        "summary": "Delete Fuzzer by Name",
        "parameters": [
          {
            "in": "path",
            "name": "fuzzer_name",
            "required": true,
            "description": "Fuzzer Name of the fuzz target job that we want to delete",
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. No fuzzer name specified."
          },
           "404": {
            "description": "Failed. No fuzzer not found."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/dataBundle":{
      "put": {
        "tags": [
          "Data Bundle Requests"
        ],
        "summary": "Add Data Bundle",
        "requestBody": {
          "description": "Add Data Bundle",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/databundle"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. missing command or argument parameters, ."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Data Bundle Requests"
        ],
        "summary": "Get Data Bundle ",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "fuzzer engine"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Data bundle not found"
          },
          "400": {
            "description": "Failed. No Data bundle was provided"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Data Bundle Requests"
        ],
        "summary": "Delete Data Bundle ",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "description": "Data Bundle name"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Data bundle not found"
          },
          "400": {
            "description": "Failed. No Data bundle was provided"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/buildMetada":{
      "put": {
        "tags": [
          "Build Metada Requests"
        ],
        "summary": "Add BuildMetada",
        "requestBody": {
          "description": "Add BuildMetada",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/buildmetada"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. missing command or argument parameters, ."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Build Metada Requests"
        ],
        "summary": "Get Build Metada ",
        "parameters": [
          {
            "name": "job_id",
            "in": "query",
            "required": true,
            "description": "job_id"
          },
          {
            "name": "revision",
            "in": "query",
            "required": true,
            "description": "revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Data bundle not found"
          },
          "400": {
            "description": "Failed. job id or revision not provided"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/crash":{
      "put": {
        "tags": [
          "Crash Requests"
        ],
        "summary": "Add Crash",
        "requestBody": {
          "description": "Add Crash Bundle",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/crash"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. missing command or argument parameters, ."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Crash Requests"
        ],
        "summary": "Get Crash ",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "crash id"
          },
          {
            "name": "testcase_id",
            "in": "query",
            "required": false,
            "description": "testcase id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Crash not found"
          },
          "400": {
            "description": "Failed. No Crash or Testcase ID were provided"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Crash Requests"
        ],
        "summary": "Delete Crash ",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "Crash ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. Crash not found"
          },
          "400": {
            "description": "Failed. No Crash ID was provided"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/testcase_variant":{
      "put": {
        "tags": [
          "Crash Requests"
        ],
        "summary": "Add TestCaseVariant",
        "requestBody": {
          "description": "Add TestCaseVariant",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCaseVariant"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. missing command or argument parameters, ."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Crash Requests"
        ],
        "summary": "Get TestCaseVariant ",
        "parameters": [
          {
            "name": "job_id",
            "in": "query",
            "required": false,
            "description": "Job id"
          },
          {
            "name": "testcase_id",
            "in": "query",
            "required": false,
            "description": "testcase id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. TestCaseVariant not found"
          },
          "400": {
            "description": "Failed. No Job ID or Testcase ID were provided"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Crash Requests"
        ],
        "summary": "Delete TestCaseVariant ",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "TestCaseVariant ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Failed. TestCaseVariant not found"
          },
          "400": {
            "description": "Failed. No TestCaseVariant ID was provided"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ID": {
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "job": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string"
          },
          "description": {
            "type": "string",
            "format": "string"
          },
          "archived": {
            "type": "boolean",
            "format": "boolean"
          },
          "enabled": {
            "type": "boolean",
            "format": "boolean"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "owner": {
            "type": "string",
            "format": "string"
          },
          "environment_string": {
            "type": "string",
            "format": "string"
          },
          "template": {
            "type": "string",
            "format": "string"
          },
          "platform": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "bot": {
        "type": "object",
        "properties": {
          "bot_name": {
            "type": "string",
            "format": "string"
          },
          "current_time": {
            "type": "string",
            "format": "date"
          },
          "task_payload": {
            "type": "string",
            "format": "string"
          },
          "task_end_time": {
            "type": "string",
            "format": "date"
          },
          "last_beat_time": {
            "type": "string",
            "format": "date"
          },
          "platform": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "heartbeat": {
        "type": "object",
        "properties": {
          "bot_name": {
            "type": "string",
            "format": "string"
          },
          "task_status": {
            "type": "string",
            "format": "string"
          },
          "last_beat_time": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "task": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "format": "string"
          },
          "platform": {
            "type": "string",
            "format": "string"
          },
          "cpmmand": {
            "type": "string",
            "format": "string"
          },
          "argument": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "fuzztarget": {
        "type": "object",
        "properties": {
          "fuzzer_engine": {
            "type": "string",
            "format": "string"
          },
          "project": {
            "type": "string",
            "format": "string"
          },
          "binary": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "testcase": {
        "type": "object",
        "properties": {
          "bug_information": {
            "type": "string",
            "format": "string"
          },
          "fixed": {
            "type": "boolean",
            "format": "boolean"
          },
          "one_time_crasher_flag": {
            "type": "boolean",
            "format": "boolean"
          },
          "comments": {
            "type": "string",
            "format": "string"
          },
          "absolute_path": {
            "type": "string",
            "format": "string"
          },
          "miminized_arguments": {
            "type": "array",
            "format": "array"
          },
          "queue": {
            "type": "string",
            "format": "string"
          },
          "archived": {
            "type": "boolean",
            "format": "boolean"
          },
          "triaged": {
            "type": "boolean",
            "format": "boolean"
          },
          "has_bug_flag": {
            "type": "boolean",
            "format": "boolean"
          },
          "open": {
            "type": "boolean",
            "format": "boolean"
          },
          "testcase_path": {
            "type": "string",
            "format": "string"
          },
          "minimized_keys": {
            "type": "string",
            "format": "string"
          },
          "minidump_keys": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "fuzztargetjob": {
        "type": "object",
        "properties": {
          "job": {
            "type": "string",
            "format": "string"
          },
          "engine": {
            "type": "string",
            "format": "string"
          },
          "fuzzing_target": {
            "type": "string",
            "format": "string"
          },
          "weight": {
            "type": "string",
            "format": "string"
          },
          "last_run": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "fuzzer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string"
          },
          "filename": {
            "type": "string",
            "format": "string"
          },
          "blobstore_path": {
            "type": "string",
            "format": "string"
          },
          "executable_path": {
            "type": "string",
            "format": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date"
          },
          "timeout": {
            "type": "integer",
            "format": "integer"
          },
          "supported_platforms": {
            "type": "string",
            "format": "string"
          },
          "launcher_script": {
            "type": "string",
            "format": "string"
          },
          "max_testcases": {
            "type": "integer",
            "format": "integer"
          },
          "untrusted_content": {
            "type": "boolean",
            "format": "boolean"
          },
          "additional_environment_string": {
            "type": "string",
            "format": "string"
          },
          "stats_columns": {
            "type": "string",
            "format": "string"
          },
          "stats_column_descriptions": {
            "type": "string",
            "format": "string"
          },
          "builtin": {
            "type": "boolean",
            "format": "boolean"
          },
          "differential": {
            "type": "boolean",
            "format": "boolean"
          },
          "has_large_testcases": {
            "type": "boolean",
            "format": "boolean"
          }
        }
      },
      "databundle": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "format": "string"
          },
          "bucket_name": {
            "type": "string",
            "format": "string"
          },
          "source": {
            "type": "string",
            "format": "string"
          },
          "is_local": {
            "type": "boolean",
            "format": "boolean"
          },
          "sync_to_worker": {
            "type": "boolean",
            "format": "boolean"
          },
          "timestamp": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "buildmetada": {
        "type": "object",
        "properties": {
          "job": {
            "type": "string",
            "format": "string"
          },
          "revision": {
            "type": "string",
            "format": "string"
          },
          "bad_build": {
            "type": "boolean",
            "format": "boolean"
          },
          "console_output": {
            "type": "string",
            "format": "string"
          },
          "bot_name": {
            "type": "string",
            "format": "string"
          },
          "symbols": {
            "type": "string",
            "format": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "crash": {
        "type": "object",
        "properties": {
          "crash_signal": {
            "type": "integer",
            "format": "int"
          },
          "exploitability": {
            "type": "string",
            "format": "string"
          },
          "crash_type": {
              "type": "string",
              "format": "string"
            },
          "crash_hash": {
              "type": "string",
              "format": "string"
            },
          "verified": {
              "type": "boolean",
              "format": "boolean"
            },
          "additional": {
              "type": "string",
              "format": "string"
            },
          "iteration": {
              "type": "integer",
              "format": "integer"
          },
          "crash_address": {
              "type": "string",
              "format": "string"
            },
          "crash_state": {
              "type": "string",
              "format": "string"
            },
          "crash_stacktrace": {
              "type": "string",
              "format": "byte"
            },
          "regression": {
              "type": "string",
              "format": "string"
            },
          "security_severity": {
              "type": "integer",
              "format": "integer"
          },
          "absolute_path": {
              "type": "string",
              "format": "string"
            },
          "security_flag": {
              "type": "boolean",
              "format": "boolean"
            },
          "reproducible_flag": {
              "type": "boolean",
              "format": "boolean"
            },
           "return_code": {
              "type": "string",
              "format": "string"
            },
           "gestures": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
           "resource_list": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
           "fuzzing_strategy": {
              "type": "string",
              "format": "string"
            },
          "should_be_ignored": {
              "type": "boolean",
              "format": "boolean"
            },
          "application_command_line": {
              "type": "string",
              "format": "string"
            },
          "unsymbolized_crash_stacktrace": {
              "type": "string",
              "format": "byte"
            },
          "crash_frame": {
              "type": "string",
              "format": "byte"
            },
          "crash_info": {
              "type": "string",
              "format": "string"
            },
          "testcase_id": {
              "type": "string",
              "format": "string"
            }
        }
      },
      "TestCaseVariant": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "format": "string"
          },
          "testcase_id": {
            "type": "string",
            "format": "string"
          }
        }
      }
    },

    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}